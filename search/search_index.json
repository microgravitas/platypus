{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Platypus","text":"<p>(Put introduction text here)</p>"},{"location":"dtfgraph/","title":"DTFGraph","text":"class <code>platypus.DTFGraph</code>(/, self) <p>A data structure to compute distance-constrained transitive fraternal augmentations.</p> <p>TODO Documentation</p> <code>adjacent</code>(/, self, u, v) <p>Returns whether vertices <code>u</code> and <code>v</code> are connected by an edge.</p> <code>augment</code>(/, self, depth, frat_depth=2) <p>Increases the depth of the augmentation.</p> <code>contains</code>(/, self, u) <p>Returns whether the vertex <code>u</code> is contained in the graph.</p> <code>degree</code>(/, self, u) <p>Returns the number of edges incident to <code>u</code> in the graph.</p> <code>degrees</code>(/, self) <p>Returns the degrees of all vertices in the graph as a [<code>VMap</code>].</p> <code>domset</code>(/, self, r) <p>Computes an approximate -dominating set of the underlying graph, where  is the provided <code>radius</code>.</p> <p>Note that if <code>radius</code> is larger than the current augmentation depth then graph is augmented further until the depth matches the <code>radius</code>.</p> <p>The approximation ratio is a function of the graph's 'sparseness'. See [Dvo\u0159\u00e1k13] and [Reidl16] for the underlying theory and [Brown20] for the details of this specific version of the algorithm.</p> <p>[Dvo\u0159\u00e1k13] Dvo\u0159\u00e1k, Z. (2013). Constant-factor approximation of the domination number in sparse graphs. European Journal of Combinatorics, 34(5), 833-840.</p> <p>[Brown20] Brown, C.T., Moritz, D., O\u2019Brien, M.P., Reidl, F., Reiter, T. and Sullivan, B.D., 2020. Exploring neighborhoods in large metagenome assembly graphs using spacegraphcats reveals hidden sequence diversity. Genome biology, 21(1), pp.1-16.</p> <p>[Reidl16] Reidl, F. (2016). Structural sparseness and complex networks (No. RWTH-2015-07564). Fachgruppe Informatik.</p> <code>edges</code>(/, self) <p>Returns the edges of this graph as a list.</p> <code>in_degree</code>(/, self, u) <code>in_degrees</code>(/, self) <p>Returns the in-degrees of all vertices in the graph as a [VMap].</p> <code>num_edges</code>(/, self) <p>Returns the number of edges in the graph.</p> <code>num_vertices</code>(/, self) <p>Returns the number of vertices in the graph.</p> <code>orient</code>(graph) <p>Creates a dtf-augmentation with depth one from the given <code>graph</code>.</p> <p>This method takes the provided graph, computes a degeneracy ordering from it (iteratively deleting vertices of minimum degree) and then orients all edges according to this ordering.</p> <code>out_degree</code>(/, self, u) <code>out_degrees</code>(/, self) <p>Returns the out-degrees of all vertices in the graph as a [VMap].</p> <code>small_distance</code>(/, self, u, v) <p>Returns the distance between the vertices <code>u</code> and <code>v</code> if it it smaller than the depth of the augmentation. Otherwise returns <code>None</code>.</p> <code>vertices</code>(/, self) <p>Returns the vertices of this graph as a set.</p>"},{"location":"dtfgraph/#arguments","title":"Arguments","text":"<ul> <li><code>depth</code> - The target depth of the augmentation</li> <li><code>frat_depth</code> - An optimisation parameter. Larger values increase computation time, recommended values are 2 or 1.</li> </ul>"},{"location":"editgraph/","title":"EditGraph","text":"class <code>platypus.EditGraph</code>(/, self) <p>A versatile graph class which allows different editing operations.</p> <p>TODO Documentation</p> <code>add_edge</code>(/, self, u, v) <p>Adds the edge <code>u</code>,<code>v</code> to the graph.</p> <code>add_vertex</code>(/, self, u) <p>Adds the vertex <code>u</code> to the graph.</p> <code>adjacent</code>(/, self, u, v) <p>Returns whether the vertices <code>u</code> and <code>v</code> are adjacent in the graph, that is, whether or not the edge <code>u</code>,<code>v</code> is contained in it.</p> <code>closed_neighbourhood</code>(/, self, vertices) <p>Returns the joint closed neighbourhood of a collection <code>vertices</code>, that is, all vertices that have at least one neighbour <code>vertices</code> or are themselves contained in it.</p> <code>components</code>(/, self) <p>Returns a list of this graph's connected components .</p> <code>contains</code>(/, self, u) <p>Returns whether <code>u</code> is a vertex in the graph.</p> <code>contract</code>(/, self, vertices) <p>Contracts the provided collection of vertices into a single new vertex and returns that vertex. The resulting neighbourhood of the vertex is the union of all neighbourhoods of the provided vertices.</p> <code>contract_into</code>(/, self, center, vertices) <p>Similar to <code>EditGraph.contract</code>, but contracts <code>vertices</code> into the specified vertex <code>center</code>.</p> <code>contract_pair</code>(/, self, u, v) <p>Contracts a pair <code>u</code>, <code>v</code> into <code>u</code>. This method works regardless of whether <code>uv</code> is an edge in the graph or not.</p> <code>copy</code>(/, self) <p>Creates a copy of the graph.</p> <code>degeneracy</code>(/, self) <p>Computes the degeneracy of the graph. For reasons of efficiency, the degeneracy is computed exactly if it lies below 32 and otherwise as a 2-approximation.</p> <p>Returns a quadruplet <code>(lower, upper, order, corenums)</code> where</p> <ul> <li><code>lower</code> is a lower bound on the degeneracy</li> <li><code>upper</code> is an upper bound on the degeneracy</li> <li><code>order</code> is the degeneracy ordering with degeneracy <code>upper</code></li> <li><code>corenums</code> is a mapping that provides the core number for every vertex</li> </ul> <code>degree</code>(/, self, u) <p>Returns the number of neighbours <code>u</code> has in the graph.</p> <code>degrees</code>(/, self) <p>Returns the degree of every vertex in the form of a <code>VMap</code>.</p> <code>edges</code>(/, self) <p>Returns a list of edges contained in this graph.</p> <code>from_file</code>(/, filename) <p>Loads a graph from the provided file. The expected file format is a text file which contains the edges of the graph separated by line breaks. Only integers are supported as vertex names. For example, the following file <pre><code>0 1\n1 2\n2 3\n</code></pre> Corresponds to a path of length four with vertices 0,1,2,4.</p> <p>This method also accepts gzipped files with this format, the file ending must be <code>.gz</code>.</p> <code>is_bipartite</code>(/, self) <p>Tests whether the graph is bipartite.</p> <p>Returns a tuple <code>(bip, witness)</code> where <code>bip</code> is a boolean that indicates whether the graph is bipartite and <code>witness</code> is either a bipartition or an odd cycle.</p> <code>neighbourhood</code>(/, self, vertices) <p>Returns the joint neighbourhood of a collection <code>vertices</code>, that is, all vertices that have a neighbour in <code>vertices</code> but are not themselves contained in it.</p> <code>neighbours</code>(/, self, u) <p>Returns the neigbhours of the vertex <code>u</code>.</p> <code>normalize</code>(/, self) <p>Normalizes the graph by relabelling vertices to 0...n-1. The relative order of the vertex ids remains the same, e.g. the smallest id is mappet to 0 and the largest to n-1.</p> <code>num_edges</code>(/, self) <p>Returns the number of edges in the graph.</p> <code>num_vertices</code>(/, self) <p>Returns the number of vertices in the graph.</p> <code>r_neighbourhood</code>(/, self, vertices, r) <p>Returns all vertices that have distance at most <code>r</code> to some vertex in the provided collection.</p> <code>r_neighbours</code>(/, self, u, r) <p>Returns all vertices that have distance at most <code>r</code> to <code>u</code>.</p> <code>remove_edge</code>(/, self, u, v) <p>Removes the edges <code>u</code>,<code>v</code> from the graph.</p> <code>remove_isolates</code>(/, self) <p>Removes all vertices from the graph that have are not incident to any edge.</p> <code>remove_loops</code>(/, self) <p>Removes all loops from the graph, meaning all edges where both endpoints are the same vertex.</p> <code>remove_vertex</code>(/, self, u) <p>Removes the vertex <code>u</code> from the graph. All edges incident to <code>u</code> are also removed.</p> <code>subgraph</code>(/, self, collection) <p>Creates a subgraph on the provided vertex collection. This method also accepts a PyVMapBool, in this case all vertices that map to <code>True</code> are used.</p> <code>to_ordered</code>(/, self, odering) <p>Converts the graph into an <code>OrdGraph</code> either by using the optional <code>ordering</code> or by computing a degeneracy ordering of the graph.</p> <code>vertices</code>(/, self) <p>Returns the set of vertices of this graph.</p>"},{"location":"global/","title":"Globals","text":"<code>platypus.V</code>(graph) <p>Returns the vertices of a graph.</p> <code>platypus.E</code>(graph) <p>Returns the edges of a graph.</p>"},{"location":"global/#graph-generators","title":"Graph generators","text":"<code>platypus.P</code>(n) <p>Generates a path graph with <code>n</code> vertices</p> <code>platypus.C</code>(n) <p>Generates a cycle graph with <code>n</code> vertices</p> <code>platypus.K</code>(*args) <p>Generates a complete k-partite graph.</p> <p>Expects as input a sequence of integers which correspond to the sizes of the partite sets. For example, <code>K(5)</code> will generate a  (a clique on five vertices) or <code>K(2,5)</code> a  (a biclique with two vertices on one side and five on the other).</p> <ul> <li>*args: A list of integers specifying the size of the partite sets.</li> </ul> <code>platypus.S</code>(n) <p>Generates a star graph with <code>n</code> leaves</p>"},{"location":"ordgraph/","title":"OrdGraph","text":"class <code>platypus.OrdGraph</code>(/, self) <p>A data structure to compute distance-constrained transitive fraternal augmentations.</p> <p>TODO Documentation</p> <code>adjacent</code>(/, self, u, v) <p>Returns whether vertices <code>u</code> and <code>v</code> are connected by an edge.</p> <code>by_degeneracy</code>(/, graph) <p>Constructs an ordered graph from <code>graph</code> by computing a degeneracy ordering.</p> <code>closed_neighbourhood</code>(/, self, vertices) <p>Returns the joint closed neighbourhood of a collection <code>vertices</code>, that is, all vertices that have at least one neighbour <code>vertices</code> or are themselves contained in it.</p> <code>contains</code>(/, self, u) <p>Returns whether the vertex <code>u</code> is contained in the graph.</p> <code>degree</code>(/, self, u) <p>Returns the number of edges incident to <code>u</code> in the graph.</p> <code>degrees</code>(/, self) <p>Returns the degrees of all vertices in the graph as a [<code>VMap</code>].</p> <code>edges</code>(/, self) <p>Returns the edges of this graph as a list.</p> <code>left_degree</code>(/, self, u) <p>Returns the number of neighbours of <code>u</code> that appear before <code>u</code> in the ordering.</p> <code>left_degrees</code>(/, self) <p>Returns the left-degrees of all vertices in the graph as a [<code>VMap</code>].</p> <code>left_neighbours</code>(/, self, u) <p>Returns the neighbours of <code>u</code> that appear before <code>u</code> in the ordering.</p> <code>neighbourhood</code>(/, self, vertices) <p>Returns the joint neighbourhood of a collection <code>vertices</code>, that is, all vertices that have a neighbour in <code>vertices</code> but are not themselves contained in it.</p> <code>neighbours</code>(/, self, u) <p>Returns the neigbhours of the vertex <code>u</code>.</p> <code>num_edges</code>(/, self) <p>Returns the number of edges in the graph.</p> <code>num_vertices</code>(/, self) <p>Returns the number of vertices in the graph.</p> <code>order</code>(/, self) <p>Returns the ordering of this graph.</p> <code>r_neighbourhood</code>(/, self, vertices, r) <p>Returns all vertices that have distance at most <code>r</code> to some vertex in the provided collection.</p> <code>r_neighbours</code>(/, self, u, r) <p>Returns all vertices that have distance at most <code>r</code> to <code>u</code>.</p> <code>right_degree</code>(/, self, u) <p>Returns the number of neighbours of <code>u</code> that appear after <code>u</code> in the ordering.</p> <code>right_degrees</code>(/, self) <p>Returns the right-degrees of all vertices in the graph as a [<code>VMap</code>].</p> <code>sreach_set</code>(/, self, u, r) <p>Computes all strongly -reachable vertices to .</p> <p>A vertex  is strongly -reachable from  if there exists a --path in the graph of length at most  where  is the only vertex of the path that comes before  in the ordering.</p> <p>Returns a <code>VMap</code> with all vertices that are strongly -reachable from . For each member  in the map the corresponding values represents the distance  at which  is strongly reachable from .</p> <code>sreach_sets</code>(/, self, r) <p>Computes all strongly -reachable sets as a map..</p> <p>A vertex  is strongly -rechable from  if there exists a --path in the graph of length at most  whose inner vertices come all after . In particular,  must be left of  in the ordering.</p> <p>Returns a <code>VMap</code> for each vertex. For a vertex  the corresponding <code>VMap</code> contains all vertices that are strongly -reachable from . For each member  in this <code>VMap</code> the corresponding values represents the distance  at which  is strongly reachable from .</p> <p>If the sizes of the strongly -reachable sets are bounded by a constant the computation takes  time.</p> <code>sreach_sizes</code>(/, self, r) <p>Returns for each vertex the size of its strongly -reachable set.</p> <code>swap</code>(/, self, u, v) <p>Swaps the positions of <code>u</code> and <code>v</code> in the ordering.</p> <code>vertices</code>(/, self) <p>Returns the vertices of this graph as a set.</p> <code>with_ordering</code>(/, graph, order) <p>Constructs an ordered graph from <code>graph</code> using <code>order</code>.</p> <code>wreach_sets</code>(/, self, r) <p>Computes all weakly -reachable sets as a map..</p> <p>A vertex  is weakly -rechable from  if there exists a --path in the graph of length at most  whose leftmost vertex is . In particular,  must be left of  in the ordering.</p> <p>Returns a <code>VMap</code> for each vertex. For a vertex  the corresponding <code>VMap</code> contains all vertices that are weakly -reachable from . For each member  in this <code>VMap</code> the corresponding values represents the distance  at which  is weakly reachable from .</p> <p>If the sizes of the weakly -reachable sets are bounded by a constant the computation takes  time.</p> <code>wreach_sizes</code>(/, self, r) <p>Returns for each vertex the size of its weakly -reachable set.</p>"},{"location":"vmap/","title":"VMap","text":"class <code>platypus.VMap</code>(/, self, map) <p>A map with vertices as keys</p> <p>TODO Documentation</p> <code>collect</code>(/, self) <p>Returns a selection of keys from the map depending on the type.</p> <p>For a boolean map it returns all vertices whose value are <code>True</code>. For all other maps, it simply returns all vertices.</p> <code>has_negative</code>(/, self) <p>Returns whether the map contains negative values. This method always returns <code>False</code> if the values are booleans.</p> <code>has_zeros</code>(/, self) <p>Returns whether the map contains zero values. In the case of boolean values, returns whether there is at least one values that is <code>False</code>.</p> <code>is_nan</code>(/, self) <p>Returns a boolean map which indicates which values in this map are <code>NaN</code>.</p> <code>items</code>(/, self) <p>Returns the contents of this map as (vertex,value) pairs.</p> <code>keys</code>(/, self) <p>Returns all vertices contained in the map.</p> <code>max</code>(/, self) <p>Returns the minimum of all values in this map. Uses the convention </p> <code>mean</code>(/, self) <p>Returns the mean of all values in this map. Boolean values are converted to  before the computation.</p> <code>min</code>(/, self) <p>Returns the minimum of all values in this map. Uses the convention </p> <code>rank</code>(/, self, reverse=False) <p>Sorts the vertices by their respective values, in ascending order.</p> <p>If the map contains floats vertices with NaN values appear last.</p> <code>sum</code>(/, self) <p>Returns the sum of all values in this map. Boolean values are converted to  before the computation.</p> <code>values</code>(/, self) <p>Returns all values that appear in this map.</p>"}]}